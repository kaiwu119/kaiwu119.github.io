{"meta":{"title":"KaiWu'Blog","subtitle":"热爱生活，记录与分享","description":null,"author":"KaiWu","url":"https://kaiwu119.github.io","root":"/"},"pages":[{"title":"about","date":"2019-08-24T05:05:38.000Z","updated":"2019-08-24T05:14:50.105Z","comments":true,"path":"about/index.html","permalink":"https://kaiwu119.github.io/about/index.html","excerpt":"","text":"关于我大学本科：西北农林科技大学专业：软件工程从事：计算机图形学 研究生就读于中国科学院深圳先进技术研究院，刚开始研一生涯，偶然有机会接触hexo，便想着自己搭建一个自己的博客，记录自己的学习和生活。之前有在CSDN上写博客，但是之后主要更新本博客。"},{"title":"categories","date":"2019-08-23T13:28:32.000Z","updated":"2019-08-23T13:29:13.956Z","comments":true,"path":"categories/index.html","permalink":"https://kaiwu119.github.io/categories/index.html","excerpt":"","text":""},{"title":"friendLinks","date":"2019-08-24T05:17:16.000Z","updated":"2019-08-24T05:17:16.494Z","comments":true,"path":"friendLinks/index.html","permalink":"https://kaiwu119.github.io/friendLinks/index.html","excerpt":"","text":""},{"title":"photoAlbum","date":"2019-08-24T05:33:56.000Z","updated":"2019-08-24T05:33:56.597Z","comments":true,"path":"photoAlbum/index.html","permalink":"https://kaiwu119.github.io/photoAlbum/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-08-23T13:05:28.000Z","updated":"2019-08-23T13:29:26.723Z","comments":true,"path":"tags/index.html","permalink":"https://kaiwu119.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"三维树木建模方法","slug":"三维树木建模方法","date":"2019-08-24T07:45:45.000Z","updated":"2019-08-24T09:34:16.289Z","comments":true,"path":"2019/08/24/三维树木建模方法/","link":"","permalink":"https://kaiwu119.github.io/2019/08/24/三维树木建模方法/","excerpt":"","text":"这是我csdn上的一个博文 几种建模方法概述在游戏设计、电影和城市规划领域，3D树的建模在虚拟场景中占了很重要的角色。因此如何快速建立真实的三维树木模型一直是研究的热点问题。 关于树木建模存在很多经典的方法，典型的方法是利用L-system建模，使用参数化方法操作复杂的参数,这个方法擅长描述植物特性不同的物种，但是这种方法需要一定的专业知识而且只能控制局部特征，并不能控制整体的特征。另一方面，L系统与环境缺少交互作用，因为植物的生长是一件比较复杂的问题，需要环境的控制才能模拟出更为真实的植物模型。这就促使了开放式L系统的产生。开放式L系统：是对L系统扩展，以支持更丰富的环境相互作用。考虑的植物与环境的相互作用主要包含空间竞争、根系对营养和水分的竞争以及对阳光的竞争等。 当需要真实感还原现实世界中的树木时, 应用L系统的方法就不太适用. 因为对这些树木模型的参数及其对应的模型空间存在着一定的局限性。这时主要采用的方法是基于视频图像和点云的重建，将视频图像和点云的重建放在一起是因为，基于视频图像的方法其实就是根据图像序列先还原成一个树木的点云，然后再根据点云进行重建，而基于点云的重建则是直接根据设备获取了真实场景的点云数据。 基于视频图像或三维点云的方法主要局限于重建现实世界中的树木, 而基于草图的方法则允许用户在建模时能同时拥有较大的自由度以及创造力. 除此之外, 草图能让用户以一种比较直观的方式来表达其建模意图, 这正是前面所述的建模方式所欠缺的。 下面给出我尝试过的获得树木的骨架的几种方法：图一为分形树（使用L-system），图二为基于草图建树，图三为基于点云生成树。 图一 图二 图三 虽然有那么多种建树的方法，其实每个方法的核心都是提取树的骨架得到树的骨架的方法很多而且每种方法都不太相同，所以这里主要介绍通用的3D树的建模方法，对每种提取骨架的方法不进行细致讨论。 枝干表示对于一棵树，枝干是其主要的组成部分，我们在计算机中表示一棵树的枝干是有很多方式的。 最为简单的方法：我们用一个圆柱或者一个多棱柱来模拟一节枝干，我们让这些圆柱紧密的连接就能产生一个光滑的枝条，这就是现在植物建模普遍使用的方法。使用圆柱代替枝干也方便了帮树木模型贴上树皮。为了增加植物模型的视觉真实感，我们需要对枝干的宽度进行调整。自然界中枝干和其子枝干是不一样粗的，所以我们要知道枝干和子枝干半径的对应关系。对应关系如下:其中a是一个系数，ri是子分支的半径，r是父分支的半径。 生成子枝干果一种方法只能提取树的主枝干的骨架，如草图建树。那么我们要人工的给这个骨架生成多个分支骨架，从而才能得到整棵树的骨架。主要使用的方法是：利用植物的自相似性进行子枝干的生成，如下图： 这里定义枝干η = {Sγ; γ = 1, 2, .. . , k} 我们在η中选择一个点Sm，把从S1到Sm作为一个子枝干，通过旋转平移添加到η中，从而实现了分支的拓展。 树叶建模 为了提升一棵树的真实感，合理的树叶是必然的。我们平时观察的树叶都是一个复杂的曲面，但是如果我们直接去对树叶建立一 个曲面（树的叶子可是繁多的），渲染如此多的树叶必然很影响效率的，而且叶子很小，效果也不见得有好，这性价比显然是很低的。 所以我们常用的方法是使用一种带alpha值的纹理图表示树叶。","categories":[{"name":"图形学","slug":"图形学","permalink":"https://kaiwu119.github.io/categories/图形学/"}],"tags":[{"name":"图形学 建模","slug":"图形学-建模","permalink":"https://kaiwu119.github.io/tags/图形学-建模/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-08-24T06:35:26.469Z","updated":"2019-08-23T14:20:56.424Z","comments":true,"path":"2019/08/24/hello-world/","link":"","permalink":"https://kaiwu119.github.io/2019/08/24/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Test2","slug":"Test2","permalink":"https://kaiwu119.github.io/categories/Test2/"}],"tags":[{"name":"Testing","slug":"Testing","permalink":"https://kaiwu119.github.io/tags/Testing/"},{"name":"default","slug":"default","permalink":"https://kaiwu119.github.io/tags/default/"}]}]}